.\" Written by Kurt Lust, kurt.lust@uantwerpen.be.
.TH man 1 "4 January 2022" "1.9" "mpi_omp_check (vsc-tutorial) command"

.SH NAME
omp_check \- Simple "Hello, World!"-style OpenMP program

.SH DESCRIPTION
\fBomp_check\fR is a simple "Hello, World!"-style OpenMP program
that can print some information about where it is running.

Each thread prints a line with its OpenMP thread number, the core
number and the node name the thread is running on.
The output is sorted according to the qOpenMP thread number.
One can also label each call to \fBomp_check\fR
which is great for
distinguishing between the output of different processes in case you
are experimenting with running multiple OpenMP processes in a single
job.

The number of threads can be set through the OMP_NUM_THREADS
environment variable.

.SH OPTIONS
.TP
\fB\-h\fR
Print help information about the command
.TP
\fB\-l\fR \fI\,LABEL\/\fR
Label the output of this process with \fI\,LABEL\/\fR. This automatically
enables displaying labels.
.TP
\fB\-w\fR \fI\,TIME\/\fR
keeps all allocated CPUs busy for approximately \fI\,TIME\/\fR seconds
computing the surface of the Mandelbrot fractal with a naive
Monte Carlo algorithm so that a user can logon to the node
and see what is happening. At the end it will print the
allocation of the threads again as the OS may have improved
the spreading of the threads over the cores.
.TP
\fB\-n\fR
Show the NUMA affinity mask: Once ASCII character per virtual core,
where a number or capital letter denotes that the core can be used
and the number or letter denotes the NUMA group (or a * if the
number of the NUMA group would be 36 or larger) and a dot denotes
that the core is not used.
.TP
\fB\-r\fR
Numeric representation of the affinity mask as a series of core
or ranges of cores.

.SH EXAMPLE

The following is a job script to start an OpenMP job in Slurm that
shows many features of this program:

.EX
.EX
#! /bin/bash
#SBATCH --time=0:20
#SBATCH --ntasks=1 --cpus-per-task=8

export OMP_PROC_BIND=true
omp_check -l test -w 15 -n -r
.EE
.EE

This script will run an \fBomp_check\fR process labeled exe1 and using
8 threads. It will also simulate some load during
approximately 15 seconds, and before and after that print the distribution
of threads including the affinity in the two supported formats.
You may have to add the appropriate \fBmodule load\fR commands to the script
to ensure that \fBomp_check\fR works, and the script also assumes that it
is in the search path for executables.

.SH SEE ALSO
serial_hello(1), omp_hello(1), mpi_hello(1), mpi_omp_hello(1), serial_check(1), mpi_check(1), mpi_omp_check(1), vsc-tutorial(1)

.SH AUTHOR
Kurt Lust (Kurt.Lust@uantwerpen.be)
